/// <reference types="node" />
import { PluginV1, PluginV2 } from 'ilp-compat-plugin';
import IlpPacket = require('ilp-packet');
export interface PaymentHandler {
    (params: PaymentHandlerParams): void | Promise<void>;
}
export interface PaymentHandlerParams {
    id: Buffer;
    expectedAmount: string;
    accept: () => Promise<PaymentReceived>;
    reject: (message: string) => void;
    acceptSingleChunk: () => void;
    rejectSingleChunk: (message: string) => void;
    prepare: IlpPacket.IlpPrepare;
}
export interface PaymentReceived {
    id: Buffer;
    receivedAmount: string;
    expectedAmount: string;
    chunksFulfilled: number;
}
export interface ReceiverOpts {
    plugin: PluginV2 | PluginV1;
    paymentHandler: PaymentHandler;
    secret?: Buffer;
}
export declare class Receiver {
    protected plugin: PluginV2;
    protected secret: Buffer;
    protected receiverId: string;
    protected paymentHandler: PaymentHandler;
    protected address: string;
    protected payments: Object;
    protected connected: boolean;
    constructor(plugin: PluginV2 | PluginV1, secret: Buffer);
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    isConnected(): boolean;
    registerPaymentHandler(handler: PaymentHandler): void;
    deregisterPaymentHandler(): void;
    generateAddressAndSecret(): {
        destinationAccount: string;
        sharedSecret: Buffer;
    };
    protected defaultPaymentHandler(params: PaymentHandlerParams): Promise<void>;
    protected reject(code: string, message?: string, data?: Buffer): Buffer;
    protected handleData: (data: Buffer) => Promise<Buffer>;
}
export declare function createReceiver(opts: ReceiverOpts): Promise<Receiver>;
